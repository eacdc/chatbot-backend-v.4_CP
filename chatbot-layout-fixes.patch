--- src/components/ChatbotLayout.js
+++ src/components/ChatbotLayout.js
@@ -1272,13 +1272,14 @@
       <style>
         {`
           /* Toggle switch styles */
           .toggle-checkbox {
             transition: .3s;
             z-index: 1;
-            right: 0;
+            position: absolute;
+            left: 0;
           }
           
           .toggle-checkbox:checked {
-            right: 0;
             transform: translateX(100%);
             border-color: #3B82F6;
           }
@@ -1943,7 +1944,7 @@
                     {/* Audio recording button - always visible regardless of audio mode */}
                     {!isRecording ? (
                       audioBlob ? (
                         <div className="flex space-x-2">
                           <button 
                             className={`bg-green-600 ${isProcessing ? 'opacity-50 cursor-not-allowed' : 'hover:bg-green-700'} text-white px-3 py-2 rounded-lg shadow-sm flex items-center justify-center transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500`}
                             onClick={sendAudioMessage}
@@ -668,6 +669,9 @@
         audioChunksRef.current.push(event.data);
       }
     };
     
+    // When recording stops, automatically send the audio
+    mediaRecorder.onstop = () => {
+      const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
+      setAudioBlob(audioBlob);
+      
+      // Release the microphone
+      stream.getTracks().forEach(track => track.stop());
+      
+      // Automatically send the audio message
+      setTimeout(() => sendAudioMessage(), 100);
+    };
+    
     mediaRecorderRef.current = mediaRecorder;
     mediaRecorder.start();
     setIsRecording(true);
@@ -722,13 +726,8 @@
   
   const stopRecording = () => {
     if (mediaRecorderRef.current && isRecording) {
       mediaRecorderRef.current.stop();
       setIsRecording(false);
-      
-      mediaRecorderRef.current.onstop = () => {
-        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
-        setAudioBlob(audioBlob);
-        // Release the microphone
-        stream.getTracks().forEach(track => track.stop());
-      };
+      // The audio will be sent automatically by the onstop handler
     }
   };
   
@@ -45,6 +44,34 @@
   const [showNotificationPopup, setShowNotificationPopup] = useState(false);
   const [chapterScore, setChapterScore] = useState(null);
   const [showScorePopup, setShowScorePopup] = useState(false);
+  
+  // Save audio messages to localStorage when they're created or updated
+  useEffect(() => {
+    // Create a serializable version of the audio messages
+    const serializedAudioMessages = {};
+    Object.entries(audioMessages).forEach(([id, url]) => {
+      // We can't store blob URLs, so just store a flag that audio exists
+      serializedAudioMessages[id] = true;
+    });
+    
+    // Save to localStorage if we have any audio messages
+    if (Object.keys(serializedAudioMessages).length > 0) {
+      localStorage.setItem('audioMessagesInfo', JSON.stringify(serializedAudioMessages));
+    }
+  }, [audioMessages]);
+
+  // Load audio message info from localStorage on component mount
+  useEffect(() => {
+    const savedAudioInfo = localStorage.getItem('audioMessagesInfo');
+    if (savedAudioInfo) {
+      try {
+        const audioInfo = JSON.parse(savedAudioInfo);
+        console.log("Found saved audio message info:", audioInfo);
+      } catch (e) {
+        console.error("Error parsing saved audio info:", e);
+      }
+    }
+  }, []);
 
   const getUserId = () => localStorage.getItem("userId");
   const getToken = () => localStorage.getItem("token");
@@ -1787,8 +1814,15 @@
                               {msg.content}
                               {msg.isAudio && msg.messageId && audioMessages[msg.messageId] && (
                                 <div className="mt-2 flex items-center">
-                                  <audio 
-                                    src={audioMessages[msg.messageId]} 
+                                  {audioMessages[msg.messageId] ? (
+                                    <audio 
+                                      src={audioMessages[msg.messageId]} 
+                                      controls 
+                                      className="h-8 w-full max-w-[200px] opacity-75" 
+                                    />
+                                  ) : (
+                                    <div className="text-xs text-blue-300">
+                                      [Audio message - Playback unavailable after page reload]
+                                    </div>
+                                  )}
                                   controls 
                                   className="h-8 w-full max-w-[200px] opacity-75" 
                                 />
                               )}